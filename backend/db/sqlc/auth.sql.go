// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package db

import (
	"context"
	"time"
)

const createEmailVerification = `-- name: CreateEmailVerification :one
INSERT INTO email_verifications (
    email,
    secret_code,
    is_used,
    expired_at
) VALUES (
    $1, $2, $3, $4
)
ON CONFLICT (email, secret_code) DO UPDATE
SET expired_at = EXCLUDED.expired_at
RETURNING id, email, secret_code, is_used, created_at, expired_at
`

type CreateEmailVerificationParams struct {
	Email      string    `json:"email"`
	SecretCode string    `json:"secret_code"`
	IsUsed     bool      `json:"is_used"`
	ExpiredAt  time.Time `json:"expired_at"`
}

func (q *Queries) CreateEmailVerification(ctx context.Context, arg CreateEmailVerificationParams) (EmailVerification, error) {
	row := q.db.QueryRow(ctx, createEmailVerification,
		arg.Email,
		arg.SecretCode,
		arg.IsUsed,
		arg.ExpiredAt,
	)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const verifyEmail = `-- name: VerifyEmail :one
UPDATE email_verifications
SET is_used = true
WHERE email = $1 
AND secret_code = $2
AND is_used = false
AND expired_at > now()
RETURNING id, email, secret_code, is_used, created_at, expired_at
`

type VerifyEmailParams struct {
	Email      string `json:"email"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) VerifyEmail(ctx context.Context, arg VerifyEmailParams) (EmailVerification, error) {
	row := q.db.QueryRow(ctx, verifyEmail, arg.Email, arg.SecretCode)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
