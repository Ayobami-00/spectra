// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chat_sessions.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const archiveChatSession = `-- name: ArchiveChatSession :one
UPDATE chat_sessions
SET 
  is_archived = true,
  updated_at = now()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, title, created_at, updated_at, last_message_at, is_archived, is_public, ip_address
`

type ArchiveChatSessionParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) ArchiveChatSession(ctx context.Context, arg ArchiveChatSessionParams) (ChatSession, error) {
	row := q.db.QueryRow(ctx, archiveChatSession, arg.ID, arg.UserID)
	var i ChatSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastMessageAt,
		&i.IsArchived,
		&i.IsPublic,
		&i.IpAddress,
	)
	return i, err
}

const countUserChatSessions = `-- name: CountUserChatSessions :one
SELECT COUNT(*) FROM chat_sessions
WHERE user_id = $1 AND is_archived = false
`

func (q *Queries) CountUserChatSessions(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countUserChatSessions, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createChatSession = `-- name: CreateChatSession :one
INSERT INTO chat_sessions (
  id,
  user_id,
  title,
  created_at,
  updated_at,
  last_message_at,
  ip_address,
  is_public 
) VALUES (
  $1, $2, $3, $4, $4, $4, $5, $6
) RETURNING id, user_id, title, created_at, updated_at, last_message_at, is_archived, is_public, ip_address
`

type CreateChatSessionParams struct {
	ID        uuid.UUID   `json:"id"`
	UserID    uuid.UUID   `json:"user_id"`
	Title     pgtype.Text `json:"title"`
	CreatedAt time.Time   `json:"created_at"`
	IpAddress string      `json:"ip_address"`
	IsPublic  bool        `json:"is_public"`
}

func (q *Queries) CreateChatSession(ctx context.Context, arg CreateChatSessionParams) (ChatSession, error) {
	row := q.db.QueryRow(ctx, createChatSession,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.CreatedAt,
		arg.IpAddress,
		arg.IsPublic,
	)
	var i ChatSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastMessageAt,
		&i.IsArchived,
		&i.IsPublic,
		&i.IpAddress,
	)
	return i, err
}

const getChatSession = `-- name: GetChatSession :one
SELECT id, user_id, title, created_at, updated_at, last_message_at, is_archived, is_public, ip_address FROM chat_sessions
WHERE id = $1 AND user_id = $2 AND is_archived = false
LIMIT 1
`

type GetChatSessionParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetChatSession(ctx context.Context, arg GetChatSessionParams) (ChatSession, error) {
	row := q.db.QueryRow(ctx, getChatSession, arg.ID, arg.UserID)
	var i ChatSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastMessageAt,
		&i.IsArchived,
		&i.IsPublic,
		&i.IpAddress,
	)
	return i, err
}

const getPublicChatSession = `-- name: GetPublicChatSession :one
SELECT id, user_id, title, created_at, updated_at, last_message_at, is_archived, is_public, ip_address FROM chat_sessions
WHERE id = $1 AND is_public = true
LIMIT 1
`

func (q *Queries) GetPublicChatSession(ctx context.Context, id uuid.UUID) (ChatSession, error) {
	row := q.db.QueryRow(ctx, getPublicChatSession, id)
	var i ChatSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastMessageAt,
		&i.IsArchived,
		&i.IsPublic,
		&i.IpAddress,
	)
	return i, err
}

const listPublicChatSessions = `-- name: ListPublicChatSessions :many
SELECT id, user_id, title, created_at, updated_at, last_message_at, is_archived, is_public, ip_address FROM chat_sessions
WHERE is_public = true
ORDER BY last_message_at DESC
`

// get all public sessions
func (q *Queries) ListPublicChatSessions(ctx context.Context) ([]ChatSession, error) {
	rows, err := q.db.Query(ctx, listPublicChatSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChatSession{}
	for rows.Next() {
		var i ChatSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastMessageAt,
			&i.IsArchived,
			&i.IsPublic,
			&i.IpAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserChatSessions = `-- name: ListUserChatSessions :many
SELECT id, user_id, title, created_at, updated_at, last_message_at, is_archived, is_public, ip_address FROM chat_sessions
WHERE user_id = $1 AND is_archived = false
ORDER BY last_message_at DESC
`

func (q *Queries) ListUserChatSessions(ctx context.Context, userID uuid.UUID) ([]ChatSession, error) {
	rows, err := q.db.Query(ctx, listUserChatSessions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChatSession{}
	for rows.Next() {
		var i ChatSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastMessageAt,
			&i.IsArchived,
			&i.IsPublic,
			&i.IpAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserChatSessionsByIP = `-- name: ListUserChatSessionsByIP :many
SELECT id, user_id, title, created_at, updated_at, last_message_at, is_archived, is_public, ip_address FROM chat_sessions
WHERE ip_address = $1 AND is_archived = false
ORDER BY last_message_at DESC
`

func (q *Queries) ListUserChatSessionsByIP(ctx context.Context, ipAddress string) ([]ChatSession, error) {
	rows, err := q.db.Query(ctx, listUserChatSessionsByIP, ipAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChatSession{}
	for rows.Next() {
		var i ChatSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastMessageAt,
			&i.IsArchived,
			&i.IsPublic,
			&i.IpAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChatSessionTitle = `-- name: UpdateChatSessionTitle :one
UPDATE chat_sessions
SET 
  title = $1,
  updated_at = now()
WHERE id = $2 AND user_id = $3
RETURNING id, user_id, title, created_at, updated_at, last_message_at, is_archived, is_public, ip_address
`

type UpdateChatSessionTitleParams struct {
	Title  pgtype.Text `json:"title"`
	ID     uuid.UUID   `json:"id"`
	UserID uuid.UUID   `json:"user_id"`
}

func (q *Queries) UpdateChatSessionTitle(ctx context.Context, arg UpdateChatSessionTitleParams) (ChatSession, error) {
	row := q.db.QueryRow(ctx, updateChatSessionTitle, arg.Title, arg.ID, arg.UserID)
	var i ChatSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastMessageAt,
		&i.IsArchived,
		&i.IsPublic,
		&i.IpAddress,
	)
	return i, err
}

const updateLastMessageTime = `-- name: UpdateLastMessageTime :one
UPDATE chat_sessions
SET 
  last_message_at = now(),
  updated_at = now()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, title, created_at, updated_at, last_message_at, is_archived, is_public, ip_address
`

type UpdateLastMessageTimeParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateLastMessageTime(ctx context.Context, arg UpdateLastMessageTimeParams) (ChatSession, error) {
	row := q.db.QueryRow(ctx, updateLastMessageTime, arg.ID, arg.UserID)
	var i ChatSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastMessageAt,
		&i.IsArchived,
		&i.IsPublic,
		&i.IpAddress,
	)
	return i, err
}
