version: '3.8'

services:
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile 
    ports:
      - "8080:8080"
    depends_on:
      - assistant_base
      - assistant_agent
      - postgres
      - redis
    env_file:
      - .env
    networks:
      - spectra

  assistant_base:
    build:
      context: ../../assistant
      dockerfile: assistant.base.dockerfile
    ports:
      - "8085:8085"
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    networks:
      - spectra

  assistant_agent:
    build:
      context: ../../assistant
      dockerfile: assistant.agent.dockerfile
    ports:
      - "5005:5005"
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    networks:
      - spectra

  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      args:
        - BASE_API_URL=${BASE_API_URL}
        - ASSISTANT_API_URL=${ASSISTANT_API_URL}
        - ASSISTANT_API_KEY=${ASSISTANT_API_KEY}
        - SENTRY_DSN=${SENTRY_DSN}
        - SENTRY_TRACE_SAMPLE_RATE=${SENTRY_TRACE_SAMPLE_RATE}
        - ASSISTANT_SUPERADMIN_API_EMAIL=${ASSISTANT_SUPERADMIN_API_EMAIL}
        - ASSISTANT_SUPERADMIN_API_PASSWORD=${ASSISTANT_SUPERADMIN_API_PASSWORD}
        - WS_URL=${WS_URL}
        - LIVEKIT_URL=${LIVEKIT_URL}
        - AMPLITUDE_API_KEY=${AMPLITUDE_API_KEY}
        - AMPLITUDE_PROJECT=${AMPLITUDE_PROJECT}
    ports:
      - "8000:80"
    depends_on:
      - backend
    env_file:
      - .env
    networks:
      - spectra

  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - spectra

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - spectra

networks:
  spectra:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
